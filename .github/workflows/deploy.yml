name: Deploy to GitHub Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build and deploy job
  build-and-deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'
      
      - name: Cache SUSHI dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.fhir
            ~/.m2
            node_modules
            input-cache
          key: ${{ runner.os }}-sushi-${{ hashFiles('**/package-lock.json', '**/pom.xml', '**/sushi-config.yaml') }}
          restore-keys: |
            ${{ runner.os }}-sushi-
      
      - name: Install SUSHI
        run: npm install -g fsh-sushi
      
      - name: Make scripts executable
        run: |
          chmod +x ./_genonce.sh
          chmod +x ./_updatePublisher.sh
      
      - name: Create input-cache directory
        run: mkdir -p input-cache
      
      - name: Download IG Publisher
        run: ./_updatePublisher.sh
      
      - name: Run SUSHI build
        run: ./_genonce.sh
      
      - name: Check output directory
        run: |
          echo "Contents of current directory:"
          ls -la
          echo "Looking for output directories:"
          find . -type d -name "*output*" -o -name "*publish*" -o -name "*site*" | head -10
          echo "Contents of potential output directories:"
          if [ -d "./output" ]; then
            echo "Found ./output directory"
            ls -la ./output
          elif [ -d "./fsh-generated" ]; then
            echo "Found ./fsh-generated directory"
            ls -la ./fsh-generated
          elif [ -d "./temp" ]; then
            echo "Found ./temp directory"
            ls -la ./temp
          fi
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload output folder (fallback to current directory if output doesn't exist)
          path: ${{ hashFiles('./output/**') != '' && './output' || '.' }}
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4